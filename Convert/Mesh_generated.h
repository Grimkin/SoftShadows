// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MESH_LOADER_MESH_H_
#define FLATBUFFERS_GENERATED_MESH_LOADER_MESH_H_

#include "flatbuffers/flatbuffers.h"

namespace Loader {
namespace Mesh {

struct Vec3;

struct Mesh;

struct Meshes;

MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3(float _x, float _y, float _z)
    : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)), z_(flatbuffers::EndianScalar(_z)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float z() const { return flatbuffers::EndianScalar(z_); }
};
STRUCT_END(Vec3, 12);

struct Mesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POSITIONS = 4,
    VT_NORMALS = 6,
    VT_INDICES = 8
  };
  const flatbuffers::Vector<const Vec3 *> *Positions() const { return GetPointer<const flatbuffers::Vector<const Vec3 *> *>(VT_POSITIONS); }
  const flatbuffers::Vector<const Vec3 *> *Normals() const { return GetPointer<const flatbuffers::Vector<const Vec3 *> *>(VT_NORMALS); }
  const flatbuffers::Vector<uint32_t> *Indices() const { return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_INDICES); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_POSITIONS) &&
           verifier.Verify(Positions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NORMALS) &&
           verifier.Verify(Normals()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_INDICES) &&
           verifier.Verify(Indices()) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Positions(flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> Positions) { fbb_.AddOffset(Mesh::VT_POSITIONS, Positions); }
  void add_Normals(flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> Normals) { fbb_.AddOffset(Mesh::VT_NORMALS, Normals); }
  void add_Indices(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> Indices) { fbb_.AddOffset(Mesh::VT_INDICES, Indices); }
  MeshBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MeshBuilder &operator=(const MeshBuilder &);
  flatbuffers::Offset<Mesh> Finish() {
    auto o = flatbuffers::Offset<Mesh>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Mesh> CreateMesh(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> Positions = 0,
   flatbuffers::Offset<flatbuffers::Vector<const Vec3 *>> Normals = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint32_t>> Indices = 0) {
  MeshBuilder builder_(_fbb);
  builder_.add_Indices(Indices);
  builder_.add_Normals(Normals);
  builder_.add_Positions(Positions);
  return builder_.Finish();
}

struct Meshes FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_OBJECTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Mesh>> *Objects() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Mesh>> *>(VT_OBJECTS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OBJECTS) &&
           verifier.Verify(Objects()) &&
           verifier.VerifyVectorOfTables(Objects()) &&
           verifier.EndTable();
  }
};

struct MeshesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Objects(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Mesh>>> Objects) { fbb_.AddOffset(Meshes::VT_OBJECTS, Objects); }
  MeshesBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MeshesBuilder &operator=(const MeshesBuilder &);
  flatbuffers::Offset<Meshes> Finish() {
    auto o = flatbuffers::Offset<Meshes>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Meshes> CreateMeshes(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Mesh>>> Objects = 0) {
  MeshesBuilder builder_(_fbb);
  builder_.add_Objects(Objects);
  return builder_.Finish();
}

inline const Loader::Mesh::Meshes *GetMeshes(const void *buf) { return flatbuffers::GetRoot<Loader::Mesh::Meshes>(buf); }

inline bool VerifyMeshesBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Loader::Mesh::Meshes>(); }

inline void FinishMeshesBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Loader::Mesh::Meshes> root) { fbb.Finish(root); }

}  // namespace Mesh
}  // namespace Loader

#endif  // FLATBUFFERS_GENERATED_MESH_LOADER_MESH_H_
